 

 

#include "Framework.h"
#include "Paddle.h"
#include "Ball.h"
#include "Block.h"
#include "TransparentBlock.h"
#include "WideBlock.h"
#include "Ability.h"
#include <string>
#include <vector>
#include <memory>
#include <format>
#include <list>
/* Test Framework realization */
class MyFramework : public Framework {
public:

	virtual void PreInit(int& width, int& height, bool& fullscreen)
	{
		width = SCREEN_WIDTH;
		height = SCREEN_HEIGHT;
		fullscreen = false;
	}

	void CreateTiles() {
		int supposed_width = float(SCREEN_WIDTH) / BLOCKS_ROW;
		Sprite* temp = createSprite("data\\02-Breakout-Tiles.png");
		int Twidth;
		int Theight;
		getSpriteSize(temp, Twidth, Theight);
		float ratio = float(supposed_width) / Twidth;
		Twidth = int(float(Twidth) * ratio);
		Theight = int(float(Theight) * ratio);

		

		std::string filename;
		std::string filenameDam;
		for (int y = 0; y < BLOCKS_COLUMN; y++)
		{
			for (int x = 0; x < BLOCKS_ROW; x++)
			{
				int img_num = y*2+1;
				if (img_num < 10)
				{
					filename = std::format("data\\0{}-Breakout-Tiles.png", std::to_string(img_num));
					filenameDam = img_num + 1<10 ? std::format("data\\0{}-Breakout-Tiles.png", std::to_string(img_num+1)) :
						std::format("data\\{}-Breakout-Tiles.png", std::to_string(img_num + 1));

				}
				else
				{
					filename = std::format("data\\{}-Breakout-Tiles.png", std::to_string(img_num));
					filenameDam = std::format("data\\{}-Breakout-Tiles.png", std::to_string(img_num + 1));
				}
				int hits_limit = std::min(MAX_BRICK_LIVES,int(BLOCKS_COLUMN - y +1));
				if (y == 6)
				{
					tiles.push_back(std::make_unique<TansparentBlock>(Vec2(x * Twidth, y * Theight + OFFSET_DOWN), supposed_width, filename.c_str(), filenameDam.c_str(),"data\\13-Breakout-TilesTransparent.png","data\\14-Breakout-TilesTransparent.png", hits_limit));
				}
				else {
					tiles.push_back(std::make_unique<Block>(Vec2(x * Twidth, y * Theight + OFFSET_DOWN), supposed_width, filename.c_str(), filenameDam.c_str(), hits_limit));
				}
			}
		}
	}
	virtual bool Init() 
	{
		//paddle init
		paddle = std::make_unique<Paddle>(Vec2(SCREEN_WIDTH / 2, float(SCREEN_HEIGHT) * 0.85), 0.2f, 1.5f, "data\\49-Breakout-Tiles.png");
		paddle->AdjustSize(float(SCREEN_WIDTH) / float(ORIGINAL_SCREEN_WIDTH));
		// background
		bg = createSprite("data\\background.png");
		setSpriteSize(bg, SCREEN_WIDTH, SCREEN_HEIGHT);
		// tiles
		CreateTiles();
		tile_collision_timer = getTickCount();
		// balls
		BallsLaunched = false;
		NeededBalls = NUMBER_BALLS;
		// life
		life = createSprite("data\\49-Breakout-Tiles.png");
		setSpriteSize(life, LIFE_SIZE, MARGING);
		livesLeft = LIVES;
		return true;
	}

	void Reset()
	{
		tiles.clear();
		balls.clear();
		paddle.reset();
		abilities.clear();
		destroySprite(bg);
		destroySprite(life);

	}

	virtual void Close() 
	{
		destroySprite(bg);
	}

	void DeleteTiles()
	{
		auto it = tiles.begin();
		while (it != tiles.end())
		{
			if ((*it)->destroyed)
			{
				// spawn an ability based on probability
				const float rand_val = (float)rand() / (float)RAND_MAX;
				if (rand_val < PROBABILITY)
				{
					abilities.push_back(std::make_unique<Ability>((*it)->getPos() + Vec2(0.0f, (float)(*it)->getHeight()),
						(float)(*it)->getWidht() / 3, rand() % 2, 0.7f));
				}
				it = tiles.erase(it);
				
			}
			else
			{
				++it;
			}
		}
	}

	virtual bool Tick() {
		drawSprite(bg, 0, 0);

		// paddle
		paddle->Update();
		paddle->Draw();

		// tiles
		for (auto& t : tiles)
		{
			t->Update();
			t->Draw();
		}
		DeleteTiles();
		// balls
		// spawn
		if (NeededBalls > 0 && balls.size() < NUMBER_BALLS && BallsLaunched)
		{

			int now = getTickCount();
			if (now - LastLaunchedBall > 1000)
			{
				LastLaunchedBall = now;
				Vec2 ShootDir = (mousePos - paddle->getPos()).GetNormalized();
				Ball* ball = new Ball(paddle->getPos() - Vec2(0.0f, paddle->getHeight() + 5), 1, 1.5,
					"data\\64-Breakout-Tiles.png");
				ball->SetVel(ShootDir * ball->GetSpeed());
				ball->AdjustSize(float(SCREEN_WIDTH) / float(ORIGINAL_SCREEN_WIDTH));
				balls.push_back(static_cast<std::unique_ptr<Ball>>(ball));
				NeededBalls -= 1;
			}

		}
		// update balls
		if (!balls.empty())
		{
			for (auto& ball : balls)
			{
				ball->Update();
				ball->BounceObjects(paddle->rect);
				// bounce bricks
				for (auto it = tiles.begin(); it != tiles.end(); ++it)
				{
					bool hit = ball->BounceObjects((*it)->rect);
					if (!(*it)->collided && hit)
					{
						(*it)->collided = true;
						(*it)->hits -= 1;
					}
				}

				ball->Draw();
			}

			// delete balls
			auto it = balls.begin();

			while (it != balls.end()) {

				if ((*it)->GetFellDown()) {

					it = balls.erase(it);
				}
				else ++it;
			}
		}
		else if (balls.empty() && NeededBalls == 0 && BallsLaunched)
		{
			BallsLaunched = false;
			livesLeft -= 1;
		}

		// reset tiles collideability
		int now_t = getTickCount();
		if (now_t - tile_collision_timer > 100)
		{
			for (auto& t : tiles)
			{
				t->collided = false;
			}
		}
		// dealing with lives
		for (int i = 0; i < livesLeft; i++)
		{

			drawSprite(life, START_LIFE_DRAWING + i * (LIFE_SIZE + MARGING), MARGING);
		}

		// lose/win conditions
		if (livesLeft == 0 || tiles.empty())
		{
			Reset();
			Init();
		}

		// abilities
		if (!abilities.empty())
		{
			for (auto& a : abilities)
			{
				a->Update();
				if (a->rect.collide_rect(paddle->rect))
				{
					if (a->type == 0)
					{
						livesLeft -= 1;
					}
					else if (a->type == 1)
					{
						tiles.push_back(std::make_unique<WideBlock>(Vec2(0.0f, (float)SCREEN_HEIGHT * 0.9),SCREEN_WIDTH, "data\\21-Breakout-Tiles.png",
							"data\\21-Breakout-Tiles.png", 1, &WideTileNum));
					}
				}
				a->Draw();
			}
			// delete abilities
			auto it = abilities.begin();

			while (it != abilities.end()) {

				if ((*it)->rect.collide_rect(paddle->rect) || (*it)->rect.pos.y >SCREEN_HEIGHT) {

					it = abilities.erase(it);
				}
				else ++it;
			}
		}
		
		return false;
	}

	virtual void onMouseMove(int x, int y, int xrelative, int yrelative) 
	{
		mousePos = { float(x), float(y) };
	}

	virtual void onMouseButtonClick(FRMouseButton button, bool isReleased) 
	{
		if (!BallsLaunched && button == FRMouseButton::LEFT)
		{
			BallsLaunched = true;
			NeededBalls = NUMBER_BALLS;
			LastLaunchedBall = getTickCount() - 1000;
		}
	}

	virtual void onKeyPressed(FRKey k) 
	{
		if (k == FRKey::RIGHT)
		{
			paddle->moving_right = true;
		}
		if (k == FRKey::LEFT)
		{
			paddle->moving_left = true;
		}
	}

	virtual void onKeyReleased(FRKey k) 
	{
		if (k == FRKey::RIGHT)
		{
			paddle->moving_right = false;
		}
		if (k == FRKey::LEFT)
		{
			paddle->moving_left = false;
		}
	}
	
	virtual const char* GetTitle() override
	{
		return "Arcanoid";
	}
private:
	std::unique_ptr<Paddle> paddle;

	std::list<std::unique_ptr<Block>> tiles;
	int tile_collision_timer;
	int WideTileNum = 0;
	std::vector<std::unique_ptr<Ball>> balls;
	bool BallsLaunched;
	int LastLaunchedBall;
	int NeededBalls;
	std::vector<std::unique_ptr<Ability>> abilities;

	Sprite* life;
	int livesLeft;
	Vec2 mousePos;
	Sprite* bg;
};

bool is_number(const std::string& s)
{
	std::string::const_iterator it = s.begin();
	while (it != s.end() && std::isdigit(*it)) ++it;
	return !s.empty() && it == s.end();
}

int main(int argc, char *argv[])
{
	if (argc > 2)
	{
		std::string sizeParam(argv[1]);
		std::string size(argv[2]);
		if (sizeParam.compare("-window") == 0)
		{

			size_t emark = size.find('x');
			if (emark != std::string::npos)
			{
				// get a copy of dimesions line to check if it is a number without x
				std::string sizeCopy = size;
				sizeCopy.erase(emark, 1);

				
				if (is_number(sizeCopy))
				{
					SCREEN_WIDTH = std::stoi(size.substr(0, emark));
					SCREEN_HEIGHT = std::stoi((size.substr(emark + 1, size.length() - emark)));
				}
					
					
			}

			
		}

	}
	return run(new MyFramework);
}
